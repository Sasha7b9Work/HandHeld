<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6180002: Last Updated: Sat Mar 16 15:16:04 2024
<BR><P>
<H3>Maximum Stack Usage =        528 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; Device::Update() &rArr; Display::Update() &rArr; Display::DrawScene(int) &rArr; Menu::Draw() &rArr; Item::Draw() const &rArr; Time::Draw() const &rArr; Watch::Draw(int, int, Color const&) &rArr; RTCDateTime::Draw(int, int, Color const&) const &rArr; Text&lang;64&rang;::Write(int, int, Color const&) const &rArr; Char::Write(int, int, Color const&) const &rArr; Rect::Fill(int, int, Color const&) const &rArr; HLine::Draw(int, int, Color const&) const &rArr; Pixel::Set(int, int, Color const&) const
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[11]">ADC_CMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">ADC_CMP_IRQHandler</a><BR>
 <LI><a href="#[10e]">Page::Draw() const</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c3]">Item::Draw() const</a><BR>
 <LI><a href="#[10b]">Page::ApplyAction(Action const&) const</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c6]">Item::ApplyAction(Action const&) const</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[11]">ADC_CMP_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[e]">DMA_Channel0_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[f]">DMA_Channel1_2_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[10]">DMA_Channel3_4_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[b]">EXTI0_1_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[c]">EXTI2_3_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[d]">EXTI4_15_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[9]">FMC_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from gd32e23x_it.o(.text.HardFault_Handler) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[20]">I2C0_ER_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[1a]">I2C0_EV_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[21]">I2C1_ER_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[1b]">I2C1_EV_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[7]">LVD_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from gd32e23x_it.o(.text.NMI_Handler) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from gd32e23x_it.o(.text.PendSV_Handler) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[a]">RCU_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[8]">RTC_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[1c]">SPI0_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[1d]">SPI1_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from gd32e23x_it.o(.text.SVC_Handler) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from gd32e23x_it.o(.text.SysTick_Handler) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[22]">SystemInit</a> from system_gd32e23x.o(.text.SystemInit) referenced from startup_gd32e23x.o(.text)
 <LI><a href="#[12]">TIMER0_BRK_UP_TRG_COM_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[13]">TIMER0_Channel_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[16]">TIMER13_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[17]">TIMER14_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[18]">TIMER15_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[19]">TIMER16_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[14]">TIMER2_IRQHandler</a> from gd32e23x_it.o(.text.TIMER2_IRQHandler) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[15]">TIMER5_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[1e]">USART0_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[1f]">USART1_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[6]">WWDGT_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[39]">_GLOBAL__sub_I_Menu.cpp</a> from menu.o(.text._GLOBAL__sub_I_Menu.cpp) referenced from menu.o(.init_array)
 <LI><a href="#[3c]">_GLOBAL__sub_I_PageCalls.cpp</a> from pagecalls.o(.text._GLOBAL__sub_I_PageCalls.cpp) referenced from pagecalls.o(.init_array)
 <LI><a href="#[3a]">_GLOBAL__sub_I_PageHistory.cpp</a> from pagehistory.o(.text._GLOBAL__sub_I_PageHistory.cpp) referenced from pagehistory.o(.init_array)
 <LI><a href="#[3b]">_GLOBAL__sub_I_PageMain.cpp</a> from pagemain.o(.text._GLOBAL__sub_I_PageMain.cpp) referenced from pagemain.o(.init_array)
 <LI><a href="#[30]">Text&lang;64&rang;::Text__sub_object(char const*, ...)</a> from display.o(.text._ZN4TextILi64EEC2EPKcz) referenced from pagecalls.o(.text._ZN9PageCallsL14DrawParametersEN6Source1EE)
 <LI><a href="#[2a]">Timer::Delay(unsigned int)</a> from timer.o(.text._ZN5Timer5DelayEj) referenced from st7735.o(.text._ZN6ST77354InitEv)
 <LI><a href="#[28]">PinOut::Init()</a> from hal_pins.o(.text._ZN6PinOut4InitEv) referenced from st7735.o(.text._ZN6ST77354InitEv)
 <LI><a href="#[2c]">ST7735::Write_Cmd_Data(unsigned char)</a> from st7735.o(.text._ZN6ST7735L14Write_Cmd_DataEh) referenced from st7735.o(.text._ZN6ST77354InitEv)
 <LI><a href="#[2b]">ST7735::Write_Cmd(unsigned char)</a> from st7735.o(.text._ZN6ST7735L9Write_CmdEh) referenced from st7735.o(.text._ZN6ST77354InitEv)
 <LI><a href="#[2e]">HAL_I2C::Write(unsigned char, unsigned char*, int)</a> from hal_i2c.o(.text._ZN7HAL_I2C5WriteEhPhi) referenced from pcf8563.o(.text._ZN7PCF85638SetTimerEj)
 <LI><a href="#[2d]">HAL_I2C::WaitFlagNo(i2c_flag_enum)</a> from hal_i2c.o(.text._ZN7HAL_I2CL10WaitFlagNoE13i2c_flag_enum) referenced from hal_i2c.o(.text._ZN7HAL_I2C4ReadEhPht)
 <LI><a href="#[2f]">Keyboard::Button::Init()</a> from keyboard.o(.text._ZN8Keyboard6Button4InitEv) referenced from keyboard.o(.text._ZN8Keyboard4InitEv)
 <LI><a href="#[34]">PageCalls::PageMobile::OnDraw_Mobile()</a> from pagecalls.o(.text._ZN9PageCalls10PageMobileL13OnDraw_MobileEv) referenced from pagecalls.o(.rodata._ZN9PageCalls10PageMobileL12dppageMobileE)
 <LI><a href="#[35]">PageCalls::PageDoorBell::OnDraw_DoorBell()</a> from pagecalls.o(.text._ZN9PageCalls12PageDoorBellL15OnDraw_DoorBellEv) referenced from pagecalls.o(.rodata._ZN9PageCalls12PageDoorBellL14dppageDoorBellE)
 <LI><a href="#[36]">PageCalls::PageIntercom::OnDraw_Intercom()</a> from pagecalls.o(.text._ZN9PageCalls12PageIntercomL15OnDraw_IntercomEv) referenced from pagecalls.o(.rodata._ZN9PageCalls12PageIntercomL14dppageIntercomE)
 <LI><a href="#[37]">PageCalls::PageHomePhone::OnDraw_HomePhone()</a> from pagecalls.o(.text._ZN9PageCalls13PageHomePhoneL16OnDraw_HomePhoneEv) referenced from pagecalls.o(.rodata._ZN9PageCalls13PageHomePhoneL15dppageHomePhoneE)
 <LI><a href="#[38]">PageCalls::PageSoundSensor::OnDraw_SoundSensor()</a> from pagecalls.o(.text._ZN9PageCalls15PageSoundSensorL18OnDraw_SoundSensorEv) referenced from pagecalls.o(.rodata._ZN9PageCalls15PageSoundSensorL17dppageSoundSensorE)
 <LI><a href="#[31]">Text&lang;64&rang;::Write(int, int, Color const&) const</a> from display.o(.text._ZNK4TextILi64EE5WriteEiiRK5Color) referenced from pagecalls.o(.text._ZN9PageCallsL14DrawParametersEN6Source1EE)
 <LI><a href="#[29]">PinOut::ToLow() const</a> from hal_pins.o(.text._ZNK6PinOut5ToLowEv) referenced from st7735.o(.text._ZN6ST77354InitEv)
 <LI><a href="#[23]">__main</a> from __main.o(!!!main) referenced from startup_gd32e23x.o(.text)
 <LI><a href="#[26]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[32]">_printf_fp_dec_real</a> from _printf_fp_dec.o(.text) referenced from printf1.o(x$fpl$printf1)
 <LI><a href="#[33]">_printf_fp_hex_real</a> from _printf_fp_hex.o(.text) referenced from printf2.o(x$fpl$printf2)
 <LI><a href="#[25]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[24]">_sputc</a> from _sputc.o(.text) referenced from vsprintf.o(.text)
 <LI><a href="#[27]">rcu_periph_clock_enable</a> from gd32e23x_rcu.o(.text.rcu_periph_clock_enable) referenced from hal.o(.text._ZN3HAL4InitEv)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[23]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(.text)
</UL>
<P><STRONG><a name="[3e]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[40]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[128]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[129]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[12a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[95]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[41]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_n &rArr; _printf_p &rArr; _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[42]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[44]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[46]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[48]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>

<P><STRONG><a name="[49]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
</UL>

<P><STRONG><a name="[4a]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[4c]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll
</UL>

<P><STRONG><a name="[4d]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[4f]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[50]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>

<P><STRONG><a name="[51]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[53]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[55]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[57]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
</UL>

<P><STRONG><a name="[58]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
</UL>

<P><STRONG><a name="[59]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_l
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[5b]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[5d]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_l
</UL>

<P><STRONG><a name="[5e]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[60]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[62]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[64]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[73]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[66]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_fp_1 &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[12b]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[12c]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[68]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[12d]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[12e]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[6a]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[12f]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[130]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[6c]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[131]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[132]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[6d]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000018))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[133]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[134]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[135]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[136]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[6f]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[137]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[138]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[139]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[13a]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[13b]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[13c]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[13d]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[13e]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[13f]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[78]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[140]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[141]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[142]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[143]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[144]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[145]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[146]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[3f]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[147]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[70]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[72]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[148]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[74]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Device::Update() &rArr; Display::Update() &rArr; Display::DrawScene(int) &rArr; Menu::Draw() &rArr; Item::Draw() const &rArr; Time::Draw() const &rArr; Watch::Draw(int, int, Color const&) &rArr; RTCDateTime::Draw(int, int, Color const&) const &rArr; Text&lang;64&rang;::Write(int, int, Color const&) const &rArr; Char::Write(int, int, Color const&) const &rArr; Rect::Fill(int, int, Color const&) const &rArr; HLine::Draw(int, int, Color const&) const &rArr; Pixel::Set(int, int, Color const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[149]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[ae]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[77]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[14a]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[79]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[e6]"></a>rand</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Source::Receive(Source::E)
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[14b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>ADC_CMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA_Channel1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA_Channel3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>RCU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIMER0_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIMER13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIMER14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIMER15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIMER16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIMER5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[104]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2210AW::CallbackOnBit()
</UL>

<P><STRONG><a name="[14c]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>vsprintf</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, vsprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text&lang;64&rang;::Text__sub_object(char const*, ...)
</UL>

<P><STRONG><a name="[7d]"></a>srand</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[69]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::Open() const
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time::ApplyAction(Action const&) const
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563::GetDateTime(RTCDateTime*)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>

<P><STRONG><a name="[14d]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>__aeabi_memmove4</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, rt_memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>

<P><STRONG><a name="[14e]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, rt_memmove.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>__aeabi_memmove</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, rt_memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::GetNextAction(Action&)
</UL>

<P><STRONG><a name="[14f]"></a>__rt_memmove</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memmove.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>__aeabi_memset4</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aeabi_memset4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memset4
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Update()
</UL>

<P><STRONG><a name="[150]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_memset4.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>

<P><STRONG><a name="[84]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[151]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Player::StartMelody(Melody const*, unsigned short)
</UL>

<P><STRONG><a name="[152]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[153]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[88]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[89]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[8a]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[8b]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[87]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[4e]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[43]"></a>_printf_charcount</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[7c]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>

<P><STRONG><a name="[24]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vsprintf.o(.text)
</UL>
<P><STRONG><a name="[8f]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[56]"></a>_printf_longlong_dec</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[92]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[52]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[5a]"></a>_printf_ll_oct</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[93]"></a>_printf_longlong_hex</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[54]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[5c]"></a>_printf_ll_hex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[45]"></a>_printf_hex_ptr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[8e]"></a>__printf</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[91]"></a>_ll_udiv10</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8d]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[32]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_ediv &rArr; btod_internal_div &rArr; __ieee_status
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(x$fpl$printf1)
</UL>
<P><STRONG><a name="[33]"></a>_printf_fp_hex_real</STRONG> (Thumb, 718 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf2.o(x$fpl$printf2)
</UL>
<P><STRONG><a name="[9f]"></a>_printf_cs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[5f]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[61]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[a1]"></a>_printf_lcs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wc (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[63]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[65]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[a3]"></a>_c16rtomb</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, _c16rtomb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[90]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, _c16rtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[8c]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[67]"></a>_fp_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fpinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[71]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[a4]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c16rtomb
</UL>

<P><STRONG><a name="[a5]"></a>__rt_fp_status_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_fp_status_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[6b]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[9d]"></a>_printf_fp_infnan</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[98]"></a>_btod_etento</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _btod_etento &rArr; _btod_ediv &rArr; btod_internal_div &rArr; __ieee_status
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[99]"></a>_btod_d2e</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _btod_d2e
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9b]"></a>_btod_emul</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ab]"></a>_btod_emuld</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, btod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>

<P><STRONG><a name="[9a]"></a>_btod_ediv</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _btod_ediv &rArr; btod_internal_div &rArr; __ieee_status
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ac]"></a>_btod_edivd</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, btod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>

<P><STRONG><a name="[76]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[156]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>__aeabi_idivmod</STRONG> (Thumb, 338 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[97]"></a>__ieee_status</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ieee_status.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ieee_status
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[159]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[15a]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>strcmp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[15b]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[15e]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, gd32e23x_it.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32e23x_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32e23x_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32e23x_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gd32e23x_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; Keyboard::Update() &rArr; Keyboard::Button::IsDown()
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::Update()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_decrement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SystemInit</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, system_gd32e23x.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(.text)
</UL>
<P><STRONG><a name="[14]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gd32e23x_it.o(.text.TIMER2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = TIMER2_IRQHandler &rArr; CMT2210AW::CallbackOnBit() &rArr; Source::Receive(Source::E) &rArr; Player::Play(TypeMelody::E) &rArr; Player::StartMelody(Melody const*, unsigned short) &rArr; Player::StartStream(Player::CompressedStreamState*, unsigned char) &rArr; Player::ReadBits(Player::CompressedStreamState*, unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2210AW::CallbackOnBit()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[f3]"></a>TimeMeterMS::Reset()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(.text._ZN11TimeMeterMS5ResetEv))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::Read(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::Write(unsigned char, unsigned char*, int)
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::WaitFlagNo(i2c_flag_enum)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::WaitFlagYes(i2c_flag_enum)
</UL>

<P><STRONG><a name="[e7]"></a>FPS::BeginFrame()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fps.o(.text._ZN3FPS10BeginFrameEv))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Update()
</UL>

<P><STRONG><a name="[b7]"></a>FPS::DrawTimeFrame(int, int)</STRONG> (Thumb, 48 bytes, Stack size 80 bytes, fps.o(.text._ZN3FPS13DrawTimeFrameEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = FPS::DrawTimeFrame(int, int) &rArr; Text&lang;64&rang;::Write(int, int, Color const&) const &rArr; Char::Write(int, int, Color const&) const &rArr; Rect::Fill(int, int, Color const&) const &rArr; HLine::Draw(int, int, Color const&) const &rArr; Pixel::Set(int, int, Color const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text&lang;64&rang;::Write(int, int, Color const&) const
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text&lang;64&rang;::Text__sub_object(char const*, ...)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::SetType(TypeFont::E)
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::DrawScene(int)
</UL>

<P><STRONG><a name="[ea]"></a>FPS::EndFrame()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fps.o(.text._ZN3FPS8EndFrameEv))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Update()
</UL>

<P><STRONG><a name="[b9]"></a>HAL::Init()</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, hal.o(.text._ZN3HAL4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL::Init() &rArr; HAL_I2C::Init() &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::Init()
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_struct_para_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Init()
</UL>

<P><STRONG><a name="[11c]"></a>Font::GetSize()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, font.o(.text._ZN4Font7GetSizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text&lang;64&rang;::Write(int, int, Color const&) const
</UL>

<P><STRONG><a name="[106]"></a>Font::SetSize(int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, font.o(.text._ZN4Font7SetSizeEi))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time::DrawField(int, int, int, int, Text&lang;64&rang; const&, bool) const
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time::Draw() const
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCDateTime::Draw(int, int, Color const&) const
</UL>

<P><STRONG><a name="[b8]"></a>Font::SetType(TypeFont::E)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, font.o(.text._ZN4Font7SetTypeEN8TypeFont1EE))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPS::DrawTimeFrame(int, int)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Init()
</UL>

<P><STRONG><a name="[109]"></a>Font::GetHeight()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, font.o(.text._ZN4Font9GetHeightEv))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Char::Write(int, int, Color const&) const
</UL>

<P><STRONG><a name="[112]"></a>Menu::SetCurrentItem(Item const*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, menu.o(.text._ZN4Menu14SetCurrentItemEPK4Item))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::Open() const
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::Close() const
</UL>

<P><STRONG><a name="[c2]"></a>Menu::Draw()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, menu.o(.text._ZN4Menu4DrawEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = Menu::Draw() &rArr; Item::Draw() const &rArr; Time::Draw() const &rArr; Watch::Draw(int, int, Color const&) &rArr; RTCDateTime::Draw(int, int, Color const&) const &rArr; Text&lang;64&rang;::Write(int, int, Color const&) const &rArr; Char::Write(int, int, Color const&) const &rArr; Rect::Fill(int, int, Color const&) const &rArr; HLine::Draw(int, int, Color const&) const &rArr; Pixel::Set(int, int, Color const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::Draw() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::DrawScene(int)
</UL>

<P><STRONG><a name="[d0]"></a>Menu::Init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(.text._ZN4Menu4InitEv))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Init()
</UL>

<P><STRONG><a name="[114]"></a>Menu::Close()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, menu.o(.text._ZN4Menu5CloseEv))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::Close() const
</UL>

<P><STRONG><a name="[c4]"></a>Menu::Update()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, menu.o(.text._ZN4Menu6UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Menu::Update() &rArr; Item::ApplyAction(Action const&) const &rArr; Time::ApplyAction(Action const&) const &rArr; PCF8563::SetDateTime(RTCDateTime*) &rArr; HAL_I2C::Write(unsigned char, unsigned char*, int) &rArr; HAL_I2C::WaitFlagNo(i2c_flag_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::ApplyAction(Action const&) const
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::GetNextAction(Action&)
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Update()
</UL>

<P><STRONG><a name="[eb]"></a>Menu::IsShown()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, menu.o(.text._ZN4Menu7IsShownEv))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::DrawScene(int)
</UL>

<P><STRONG><a name="[30]"></a>Text&lang;64&rang;::Text__sub_object(char const*, ...)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, display.o(.text._ZN4TextILi64EEC2EPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = Text&lang;64&rang;::Text__sub_object(char const*, ...) &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::Title() const
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time::Draw() const
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice::Draw() const
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPS::DrawTimeFrame(int, int)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Source::Draw(int, int, Color const&) const
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCDateTime::Draw(int, int, Color const&) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pagecalls.o(.text._ZN9PageCallsL14DrawParametersEN6Source1EE)
</UL>
<P><STRONG><a name="[c7]"></a>PinIn::Init()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_pins.o(.text._ZN5PinIn4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PinIn::Init() &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2210AW::Init()
</UL>

<P><STRONG><a name="[2a]"></a>Timer::Delay(unsigned int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(.text._ZN5Timer5DelayEj))
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.text._ZN6ST77354InitEv)
</UL>
<P><STRONG><a name="[ca]"></a>Watch::Draw(int, int, Color const&)</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, watch.o(.text._ZN5Watch4DrawEiiRK5Color))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = Watch::Draw(int, int, Color const&) &rArr; RTCDateTime::Draw(int, int, Color const&) const &rArr; Text&lang;64&rang;::Write(int, int, Color const&) const &rArr; Char::Write(int, int, Color const&) const &rArr; Rect::Fill(int, int, Color const&) const &rArr; HLine::Draw(int, int, Color const&) const &rArr; Pixel::Set(int, int, Color const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCDateTime::Draw(int, int, Color const&) const
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563::GetDateTime(RTCDateTime*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time::Draw() const
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::DrawScene(int)
</UL>

<P><STRONG><a name="[cd]"></a>Beeper::Init()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, beeper.o(.text._ZN6Beeper4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Beeper::Init() &rArr; PinOut::Init() &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinOut::Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Player::Init()
</UL>

<P><STRONG><a name="[ce]"></a>Device::Init()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, device.o(.text._ZN6Device4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Device::Init() &rArr; HAL::Init() &rArr; HAL_I2C::Init() &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Player::Init()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563::SetTimer(unsigned int)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563::Init()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2210AW::Init()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Init()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu::Init()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::Init()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d6]"></a>Device::Update()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, device.o(.text._ZN6Device6UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = Device::Update() &rArr; Display::Update() &rArr; Display::DrawScene(int) &rArr; Menu::Draw() &rArr; Item::Draw() const &rArr; Time::Draw() const &rArr; Watch::Draw(int, int, Color const&) &rArr; RTCDateTime::Draw(int, int, Color const&) const &rArr; Text&lang;64&rang;::Write(int, int, Color const&) const &rArr; Char::Write(int, int, Color const&) const &rArr; Rect::Fill(int, int, Color const&) const &rArr; HLine::Draw(int, int, Color const&) const &rArr; Pixel::Set(int, int, Color const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Update()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563::Update()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu::Update()
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28]"></a>PinOut::Init()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hal_pins.o(.text._ZN6PinOut4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PinOut::Init() &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beeper::Init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.text._ZN6ST77354InitEv)
</UL>
<P><STRONG><a name="[da]"></a>Player::StartMelody(Melody const*, unsigned short)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, player.o(.text._ZN6Player11StartMelodyEPK6Melodyt))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Player::StartMelody(Melody const*, unsigned short) &rArr; Player::StartStream(Player::CompressedStreamState*, unsigned char) &rArr; Player::ReadBits(Player::CompressedStreamState*, unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Player::StartStream(Player::CompressedStreamState*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Player::Play(TypeMelody::E)
</UL>

<P><STRONG><a name="[d5]"></a>Player::Init()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, player.o(.text._ZN6Player4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Player::Init() &rArr; Beeper::Init() &rArr; PinOut::Init() &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beeper::Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Init()
</UL>

<P><STRONG><a name="[dd]"></a>Player::Play(TypeMelody::E)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, player.o(.text._ZN6Player4PlayEN10TypeMelody1EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Player::Play(TypeMelody::E) &rArr; Player::StartMelody(Melody const*, unsigned short) &rArr; Player::StartStream(Player::CompressedStreamState*, unsigned char) &rArr; Player::ReadBits(Player::CompressedStreamState*, unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Player::StartMelody(Melody const*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Source::Receive(Source::E)
</UL>

<P><STRONG><a name="[df]"></a>ST7735::WriteBuffer(int)</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, st7735.o(.text._ZN6ST773511WriteBufferEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ST7735::WriteBuffer(int) &rArr; ST7735::SendData16(unsigned short) &rArr; ST7735::SendByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Buffer::GetLine(int)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::SendData16(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::EndScene(int)
</UL>

<P><STRONG><a name="[e2]"></a>ST7735::Init()</STRONG> (Thumb, 472 bytes, Stack size 56 bytes, st7735.o(.text._ZN6ST77354InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ST7735::Init()
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinOut::ToHi() const
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Init()
</UL>

<P><STRONG><a name="[ec]"></a>Source::IsReceived(Source::E)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, settings.o(.text._ZN6Source10IsReceivedENS_1EE))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::DrawScene(int)
</UL>

<P><STRONG><a name="[e5]"></a>Source::Receive(Source::E)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, settings.o(.text._ZN6Source7ReceiveENS_1EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Source::Receive(Source::E) &rArr; Player::Play(TypeMelody::E) &rArr; Player::StartMelody(Melody const*, unsigned short) &rArr; Player::StartStream(Player::CompressedStreamState*, unsigned char) &rArr; Player::ReadBits(Player::CompressedStreamState*, unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Player::Play(TypeMelody::E)
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2210AW::CallbackOnBit()
</UL>

<P><STRONG><a name="[d1]"></a>Display::Init()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, display.o(.text._ZN7Display4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Display::Init() &rArr; ST7735::Init()
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::SetType(TypeFont::E)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Init()
</UL>

<P><STRONG><a name="[e0]"></a>Display::Buffer::GetLine(int)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, display.o(.text._ZN7Display6Buffer7GetLineEi))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::WriteBuffer(int)
</UL>

<P><STRONG><a name="[d8]"></a>Display::Update()</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, display.o(.text._ZN7Display6UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = Display::Update() &rArr; Display::DrawScene(int) &rArr; Menu::Draw() &rArr; Item::Draw() const &rArr; Time::Draw() const &rArr; Watch::Draw(int, int, Color const&) &rArr; RTCDateTime::Draw(int, int, Color const&) const &rArr; Text&lang;64&rang;::Write(int, int, Color const&) const &rArr; Char::Write(int, int, Color const&) const &rArr; Rect::Fill(int, int, Color const&) const &rArr; HLine::Draw(int, int, Color const&) const &rArr; Pixel::Set(int, int, Color const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPS::EndFrame()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::EndScene(int)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::DrawScene(int)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPS::BeginFrame()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Update()
</UL>

<P><STRONG><a name="[e9]"></a>Display::EndScene(int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, display.o(.text._ZN7Display8EndSceneEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Display::EndScene(int) &rArr; ST7735::WriteBuffer(int) &rArr; ST7735::SendData16(unsigned short) &rArr; ST7735::SendByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::WriteBuffer(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Update()
</UL>

<P><STRONG><a name="[e8]"></a>Display::DrawScene(int)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, display.o(.text._ZN7Display9DrawSceneEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = Display::DrawScene(int) &rArr; Menu::Draw() &rArr; Item::Draw() const &rArr; Time::Draw() const &rArr; Watch::Draw(int, int, Color const&) &rArr; RTCDateTime::Draw(int, int, Color const&) const &rArr; Text&lang;64&rang;::Write(int, int, Color const&) const &rArr; Char::Write(int, int, Color const&) const &rArr; Rect::Fill(int, int, Color const&) const &rArr; HLine::Draw(int, int, Color const&) const &rArr; Pixel::Set(int, int, Color const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPS::DrawTimeFrame(int, int)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Source::Draw(int, int, Color const&) const
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Source::IsReceived(Source::E)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu::Draw()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu::IsShown()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Watch::Draw(int, int, Color const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Update()
</UL>

<P><STRONG><a name="[bc]"></a>HAL_I2C::Init()</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, hal_i2c.o(.text._ZN7HAL_I2C4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_I2C::Init() &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_enable
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ack_config
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_mode_addr_config
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_clock_config
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Init()
</UL>

<P><STRONG><a name="[b6]"></a>HAL_I2C::Read(unsigned char, unsigned char*, unsigned short)</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, hal_i2c.o(.text._ZN7HAL_I2C4ReadEhPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_I2C::Read(unsigned char, unsigned char*, unsigned short) &rArr; HAL_I2C::WaitFlagYes(i2c_flag_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_clear
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_get
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_data_receive
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_data_transmit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop_on_bus
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start_on_bus
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_addressing
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ack_config
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::WaitFlagYes(i2c_flag_enum)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeMeterMS::ElapsedTime() const
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeMeterMS::Reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563::Update()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563::SetTimer(unsigned int)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563::ClkoutFrequency(CLKOUT_Freq::E)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBitToControlRegister(unsigned char, unsigned char, bool)
</UL>

<P><STRONG><a name="[2e]"></a>HAL_I2C::Write(unsigned char, unsigned char*, int)</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, hal_i2c.o(.text._ZN7HAL_I2C5WriteEhPhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_I2C::Write(unsigned char, unsigned char*, int) &rArr; HAL_I2C::WaitFlagNo(i2c_flag_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_clear
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_data_transmit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop_on_bus
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start_on_bus
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_addressing
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ack_config
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::WaitFlagNo(i2c_flag_enum)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::WaitFlagYes(i2c_flag_enum)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeMeterMS::ElapsedTime() const
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeMeterMS::Reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563::SetDateTime(RTCDateTime*)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563::ClkoutFrequency(CLKOUT_Freq::E)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBitToControlRegister(unsigned char, unsigned char, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pcf8563.o(.text._ZN7PCF85638SetTimerEj)
</UL>
<P><STRONG><a name="[fd]"></a>PCF8563::STOPEnable(bool)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pcf8563.o(.text._ZN7PCF856310STOPEnableEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PCF8563::STOPEnable(bool) &rArr; WriteBitToControlRegister(unsigned char, unsigned char, bool) &rArr; HAL_I2C::Read(unsigned char, unsigned char*, unsigned short) &rArr; HAL_I2C::WaitFlagYes(i2c_flag_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBitToControlRegister(unsigned char, unsigned char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563::Init()
</UL>

<P><STRONG><a name="[cb]"></a>PCF8563::GetDateTime(RTCDateTime*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pcf8563.o(.text._ZN7PCF856311GetDateTimeEP11RTCDateTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PCF8563::GetDateTime(RTCDateTime*) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::Open() const
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Watch::Draw(int, int, Color const&)
</UL>

<P><STRONG><a name="[fe]"></a>PCF8563::SetDateTime(RTCDateTime*)</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, pcf8563.o(.text._ZN7PCF856311SetDateTimeEP11RTCDateTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PCF8563::SetDateTime(RTCDateTime*) &rArr; HAL_I2C::Write(unsigned char, unsigned char*, int) &rArr; HAL_I2C::WaitFlagNo(i2c_flag_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::Write(unsigned char, unsigned char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time::ApplyAction(Action const&) const
</UL>

<P><STRONG><a name="[ff]"></a>PCF8563::ClkoutFrequency(CLKOUT_Freq::E)</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, pcf8563.o(.text._ZN7PCF856315ClkoutFrequencyEN11CLKOUT_Freq1EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PCF8563::ClkoutFrequency(CLKOUT_Freq::E) &rArr; HAL_I2C::Read(unsigned char, unsigned char*, unsigned short) &rArr; HAL_I2C::WaitFlagYes(i2c_flag_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::Read(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::Write(unsigned char, unsigned char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563::Init()
</UL>

<P><STRONG><a name="[d3]"></a>PCF8563::Init()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pcf8563.o(.text._ZN7PCF85634InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PCF8563::Init() &rArr; PCF8563::ClkoutFrequency(CLKOUT_Freq::E) &rArr; HAL_I2C::Read(unsigned char, unsigned char*, unsigned short) &rArr; HAL_I2C::WaitFlagYes(i2c_flag_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563::ClkoutFrequency(CLKOUT_Freq::E)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563::STOPEnable(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Init()
</UL>

<P><STRONG><a name="[d7]"></a>PCF8563::Update()</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, pcf8563.o(.text._ZN7PCF85636UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PCF8563::Update() &rArr; HAL_I2C::Read(unsigned char, unsigned char*, unsigned short) &rArr; HAL_I2C::WaitFlagYes(i2c_flag_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::Read(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Update()
</UL>

<P><STRONG><a name="[11e]"></a>PCF8563::SetAlarm(RTCDateTime*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pcf8563.o(.text._ZN7PCF85638SetAlarmEP11RTCDateTime))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time::ApplyAction(Action const&) const
</UL>

<P><STRONG><a name="[d4]"></a>PCF8563::SetTimer(unsigned int)</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, pcf8563.o(.text._ZN7PCF85638SetTimerEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PCF8563::SetTimer(unsigned int) &rArr; HAL_I2C::Read(unsigned char, unsigned char*, unsigned short) &rArr; HAL_I2C::WaitFlagYes(i2c_flag_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::Read(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Init()
</UL>

<P><STRONG><a name="[c5]"></a>Keyboard::GetNextAction(Action&)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, keyboard.o(.text._ZN8Keyboard13GetNextActionER6Action))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Keyboard::GetNextAction(Action&) &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu::Update()
</UL>

<P><STRONG><a name="[cf]"></a>Keyboard::Init()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, keyboard.o(.text._ZN8Keyboard4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Keyboard::Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Init()
</UL>

<P><STRONG><a name="[2f]"></a>Keyboard::Button::Init()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, keyboard.o(.text._ZN8Keyboard6Button4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Keyboard::Button::Init() &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.text._ZN8Keyboard4InitEv)
</UL>
<P><STRONG><a name="[100]"></a>Keyboard::Button::IsDown()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, keyboard.o(.text._ZN8Keyboard6Button6IsDownEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Keyboard::Button::IsDown()
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::Update()
</UL>

<P><STRONG><a name="[b0]"></a>Keyboard::Update()</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, keyboard.o(.text._ZN8Keyboard6UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Keyboard::Update() &rArr; Keyboard::Button::IsDown()
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::Button::IsDown()
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[b4]"></a>CMT2210AW::CallbackOnBit()</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, cmt2210aw.o(.text._ZN9CMT2210AW13CallbackOnBitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = CMT2210AW::CallbackOnBit() &rArr; Source::Receive(Source::E) &rArr; Player::Play(TypeMelody::E) &rArr; Player::StartMelody(Melody const*, unsigned short) &rArr; Player::StartStream(Player::CompressedStreamState*, unsigned char) &rArr; Player::ReadBits(Player::CompressedStreamState*, unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinIn::IsHi() const
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Source::Receive(Source::E)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2210AW::GetBits(unsigned long long)
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
</UL>

<P><STRONG><a name="[d2]"></a>CMT2210AW::Init()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cmt2210aw.o(.text._ZN9CMT2210AW4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CMT2210AW::Init() &rArr; PinIn::Init() &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinIn::Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Init()
</UL>

<P><STRONG><a name="[cc]"></a>RTCDateTime::Draw(int, int, Color const&) const</STRONG> (Thumb, 84 bytes, Stack size 88 bytes, display.o(.text._ZNK11RTCDateTime4DrawEiiRK5Color))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = RTCDateTime::Draw(int, int, Color const&) const &rArr; Text&lang;64&rang;::Write(int, int, Color const&) const &rArr; Char::Write(int, int, Color const&) const &rArr; Rect::Fill(int, int, Color const&) const &rArr; HLine::Draw(int, int, Color const&) const &rArr; Pixel::Set(int, int, Color const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text&lang;64&rang;::Write(int, int, Color const&) const
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text&lang;64&rang;::Text__sub_object(char const*, ...)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::SetSize(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time::Draw() const
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Watch::Draw(int, int, Color const&)
</UL>

<P><STRONG><a name="[fb]"></a>TimeMeterMS::ElapsedTime() const</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer.o(.text._ZNK11TimeMeterMS11ElapsedTimeEv))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::Read(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::Write(unsigned char, unsigned char*, int)
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::WaitFlagNo(i2c_flag_enum)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::WaitFlagYes(i2c_flag_enum)
</UL>

<P><STRONG><a name="[107]"></a>Char::Write(int, int, Color const&) const</STRONG> (Thumb, 264 bytes, Stack size 56 bytes, font.o(.text._ZNK4Char5WriteEiiRK5Color))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Char::Write(int, int, Color const&) const &rArr; Rect::Fill(int, int, Color const&) const &rArr; HLine::Draw(int, int, Color const&) const &rArr; Pixel::Set(int, int, Color const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::GetHeight()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color::SetAsCurrent() const
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rect::Fill(int, int, Color const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text&lang;64&rang;::Write(int, int, Color const&) const
</UL>

<P><STRONG><a name="[c6]"></a>Item::ApplyAction(Action const&) const</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, menuitems.o(.text._ZNK4Item11ApplyActionERK6Action))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Item::ApplyAction(Action const&) const &rArr; Time::ApplyAction(Action const&) const &rArr; PCF8563::SetDateTime(RTCDateTime*) &rArr; HAL_I2C::Write(unsigned char, unsigned char*, int) &rArr; HAL_I2C::WaitFlagNo(i2c_flag_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time::ApplyAction(Action const&) const
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice::ApplyAction(Action const&) const
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::ApplyAction(Action const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::ApplyAction(Action const&) const
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu::Update()
</UL>

<P><STRONG><a name="[c3]"></a>Item::Draw() const</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, menuitems.o(.text._ZNK4Item4DrawEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = Item::Draw() const &rArr; Time::Draw() const &rArr; Watch::Draw(int, int, Color const&) &rArr; RTCDateTime::Draw(int, int, Color const&) const &rArr; Text&lang;64&rang;::Write(int, int, Color const&) const &rArr; Char::Write(int, int, Color const&) const &rArr; Rect::Fill(int, int, Color const&) const &rArr; HLine::Draw(int, int, Color const&) const &rArr; Pixel::Set(int, int, Color const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time::Draw() const
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice::Draw() const
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Draw() const
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Draw() const
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu::Draw()
</UL>

<P><STRONG><a name="[111]"></a>Item::Open() const</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, menuitems.o(.text._ZNK4Item4OpenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Item::Open() const &rArr; PCF8563::GetDateTime(RTCDateTime*) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu::SetCurrentItem(Item const*)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563::GetDateTime(RTCDateTime*)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::ApplyAction(Action const&) const
</UL>

<P><STRONG><a name="[113]"></a>Item::Close() const</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, menuitems.o(.text._ZNK4Item5CloseEv))
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu::Close()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu::SetCurrentItem(Item const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time::ApplyAction(Action const&) const
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::ApplyAction(Action const&) const
</UL>

<P><STRONG><a name="[115]"></a>Item::Title() const</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, menuitems.o(.text._ZNK4Item5TitleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Item::Title() const &rArr; Text&lang;64&rang;::Text__sub_object(char const*, ...) &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::NumItems() const
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text&lang;64&rang;::Text__sub_object(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time::Draw() const
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice::Draw() const
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Draw() const
</UL>

<P><STRONG><a name="[10b]"></a>Page::ApplyAction(Action const&) const</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, menuitems.o(.text._ZNK4Page11ApplyActionERK6Action))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = Page::ApplyAction(Action const&) const &rArr;  Item::ApplyAction(Action const&) const (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::Open() const
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::NextCurrentItem() const
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::PrevCurrentItem() const
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::Close() const
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::NumItems() const
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::ApplyAction(Action const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::ApplyAction(Action const&) const
</UL>

<P><STRONG><a name="[118]"></a>Page::NextCurrentItem() const</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, menuitems.o(.text._ZNK4Page15NextCurrentItemEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Page::NextCurrentItem() const
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::NumItems() const
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::ApplyAction(Action const&) const
</UL>

<P><STRONG><a name="[117]"></a>Page::PrevCurrentItem() const</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, menuitems.o(.text._ZNK4Page15PrevCurrentItemEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Page::PrevCurrentItem() const
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::NumItems() const
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::ApplyAction(Action const&) const
</UL>

<P><STRONG><a name="[10e]"></a>Page::Draw() const</STRONG> (Thumb, 80 bytes, Stack size 80 bytes, menuitems.o(.text._ZNK4Page4DrawEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = Page::Draw() const &rArr;  Item::Draw() const (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::Title() const
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::Draw() const
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text&lang;64&rang;::Write(int, int, Color const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::Draw() const
</UL>

<P><STRONG><a name="[116]"></a>Page::NumItems() const</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, menuitems.o(.text._ZNK4Page8NumItemsEv))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::NextCurrentItem() const
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::PrevCurrentItem() const
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::ApplyAction(Action const&) const
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::Title() const
</UL>

<P><STRONG><a name="[119]"></a>Rect::Draw(int, int, Color const&) const</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, display.o(.text._ZNK4Rect4DrawEiiRK5Color))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Rect::Draw(int, int, Color const&) const &rArr; VLine::Draw(int, int, Color const&) const &rArr; Pixel::Set(int, int, Color const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VLine::Draw(int, int, Color const&) const
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLine::Draw(int, int, Color const&) const
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color::SetAsCurrent() const
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time::DrawField(int, int, int, int, Text&lang;64&rang; const&, bool) const
</UL>

<P><STRONG><a name="[10a]"></a>Rect::Fill(int, int, Color const&) const</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, display.o(.text._ZNK4Rect4FillEiiRK5Color))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Rect::Fill(int, int, Color const&) const &rArr; HLine::Draw(int, int, Color const&) const &rArr; Pixel::Set(int, int, Color const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLine::Draw(int, int, Color const&) const
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color::SetAsCurrent() const
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time::DrawField(int, int, int, int, Text&lang;64&rang; const&, bool) const
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Char::Write(int, int, Color const&) const
</UL>

<P><STRONG><a name="[31]"></a>Text&lang;64&rang;::Write(int, int, Color const&) const</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, display.o(.text._ZNK4TextILi64EE5WriteEiiRK5Color))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Text&lang;64&rang;::Write(int, int, Color const&) const &rArr; Char::Write(int, int, Color const&) const &rArr; Rect::Fill(int, int, Color const&) const &rArr; HLine::Draw(int, int, Color const&) const &rArr; Pixel::Set(int, int, Color const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::GetSize()
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Char::Write(int, int, Color const&) const
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color::SetAsCurrent() const
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time::DrawField(int, int, int, int, Text&lang;64&rang; const&, bool) const
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time::Draw() const
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice::Draw() const
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Draw() const
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPS::DrawTimeFrame(int, int)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Source::Draw(int, int, Color const&) const
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCDateTime::Draw(int, int, Color const&) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pagecalls.o(.text._ZN9PageCallsL14DrawParametersEN6Source1EE)
</UL>
<P><STRONG><a name="[10d]"></a>Time::ApplyAction(Action const&) const</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, menuitems.o(.text._ZNK4Time11ApplyActionERK6Action))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Time::ApplyAction(Action const&) const &rArr; PCF8563::SetDateTime(RTCDateTime*) &rArr; HAL_I2C::Write(unsigned char, unsigned char*, int) &rArr; HAL_I2C::WaitFlagNo(i2c_flag_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563::SetDateTime(RTCDateTime*)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563::SetAlarm(RTCDateTime*)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time::ChangeCurrentField(int) const
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::Close() const
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::ApplyAction(Action const&) const
</UL>

<P><STRONG><a name="[11d]"></a>Time::ChangeCurrentField(int) const</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, menuitems.o(.text._ZNK4Time18ChangeCurrentFieldEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Time::ChangeCurrentField(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time::ApplyAction(Action const&) const
</UL>

<P><STRONG><a name="[110]"></a>Time::Draw() const</STRONG> (Thumb, 404 bytes, Stack size 208 bytes, menuitems.o(.text._ZNK4Time4DrawEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = Time::Draw() const &rArr; Watch::Draw(int, int, Color const&) &rArr; RTCDateTime::Draw(int, int, Color const&) const &rArr; Text&lang;64&rang;::Write(int, int, Color const&) const &rArr; Char::Write(int, int, Color const&) const &rArr; Rect::Fill(int, int, Color const&) const &rArr; HLine::Draw(int, int, Color const&) const &rArr; Pixel::Set(int, int, Color const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time::DrawField(int, int, int, int, Text&lang;64&rang; const&, bool) const
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::Title() const
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text&lang;64&rang;::Write(int, int, Color const&) const
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text&lang;64&rang;::Text__sub_object(char const*, ...)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::SetSize(int)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCDateTime::Draw(int, int, Color const&) const
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Watch::Draw(int, int, Color const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::Draw() const
</UL>

<P><STRONG><a name="[11f]"></a>Time::DrawField(int, int, int, int, Text&lang;64&rang; const&, bool) const</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, menuitems.o(.text._ZNK4Time9DrawFieldEiiiiRK4TextILi64EEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Time::DrawField(int, int, int, int, Text&lang;64&rang; const&, bool) const &rArr; Text&lang;64&rang;::Write(int, int, Color const&) const &rArr; Char::Write(int, int, Color const&) const &rArr; Rect::Fill(int, int, Color const&) const &rArr; HLine::Draw(int, int, Color const&) const &rArr; Pixel::Set(int, int, Color const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text&lang;64&rang;::Write(int, int, Color const&) const
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::SetSize(int)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rect::Draw(int, int, Color const&) const
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rect::Fill(int, int, Color const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time::Draw() const
</UL>

<P><STRONG><a name="[108]"></a>Color::SetAsCurrent() const</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, colors.o(.text._ZNK5Color12SetAsCurrentEv))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Char::Write(int, int, Color const&) const
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text&lang;64&rang;::Write(int, int, Color const&) const
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VLine::Draw(int, int, Color const&) const
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rect::Draw(int, int, Color const&) const
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pixel::Set(int, int, Color const&) const
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLine::Draw(int, int, Color const&) const
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rect::Fill(int, int, Color const&) const
</UL>

<P><STRONG><a name="[11a]"></a>HLine::Draw(int, int, Color const&) const</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, display.o(.text._ZNK5HLine4DrawEiiRK5Color))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HLine::Draw(int, int, Color const&) const &rArr; Pixel::Set(int, int, Color const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pixel::Set(int, int, Color const&) const
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color::SetAsCurrent() const
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rect::Draw(int, int, Color const&) const
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rect::Fill(int, int, Color const&) const
</UL>

<P><STRONG><a name="[102]"></a>PinIn::IsHi() const</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal_pins.o(.text._ZNK5PinIn4IsHiEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PinIn::IsHi() const
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2210AW::CallbackOnBit()
</UL>

<P><STRONG><a name="[120]"></a>Pixel::Set(int, int, Color const&) const</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, display.o(.text._ZNK5Pixel3SetEiiRK5Color))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Pixel::Set(int, int, Color const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color::SetAsCurrent() const
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VLine::Draw(int, int, Color const&) const
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLine::Draw(int, int, Color const&) const
</UL>

<P><STRONG><a name="[11b]"></a>VLine::Draw(int, int, Color const&) const</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, display.o(.text._ZNK5VLine4DrawEiiRK5Color))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VLine::Draw(int, int, Color const&) const &rArr; Pixel::Set(int, int, Color const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pixel::Set(int, int, Color const&) const
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color::SetAsCurrent() const
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rect::Draw(int, int, Color const&) const
</UL>

<P><STRONG><a name="[121]"></a>Choice::NumChoices() const</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, menuitems.o(.text._ZNK6Choice10NumChoicesEv))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice::ApplyAction(Action const&) const
</UL>

<P><STRONG><a name="[10c]"></a>Choice::ApplyAction(Action const&) const</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, menuitems.o(.text._ZNK6Choice11ApplyActionERK6Action))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Choice::ApplyAction(Action const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice::NumChoices() const
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::ApplyAction(Action const&) const
</UL>

<P><STRONG><a name="[10f]"></a>Choice::Draw() const</STRONG> (Thumb, 80 bytes, Stack size 88 bytes, menuitems.o(.text._ZNK6Choice4DrawEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = Choice::Draw() const &rArr; Item::Title() const &rArr; Text&lang;64&rang;::Text__sub_object(char const*, ...) &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::Title() const
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text&lang;64&rang;::Write(int, int, Color const&) const
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text&lang;64&rang;::Text__sub_object(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::Draw() const
</UL>

<P><STRONG><a name="[e3]"></a>PinOut::ToHi() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_pins.o(.text._ZNK6PinOut4ToHiEv))
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::Init()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::SendData16(unsigned short)
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::Write_Cmd_Data(unsigned char)
</UL>

<P><STRONG><a name="[29]"></a>PinOut::ToLow() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_pins.o(.text._ZNK6PinOut5ToLowEv))
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::Write_Cmd(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.text._ZN6ST77354InitEv)
</UL>
<P><STRONG><a name="[ed]"></a>Source::Draw(int, int, Color const&) const</STRONG> (Thumb, 92 bytes, Stack size 80 bytes, settings.o(.text._ZNK6Source4DrawEiiRK5Color))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = Source::Draw(int, int, Color const&) const &rArr; Text&lang;64&rang;::Write(int, int, Color const&) const &rArr; Char::Write(int, int, Color const&) const &rArr; Rect::Fill(int, int, Color const&) const &rArr; HLine::Draw(int, int, Color const&) const &rArr; Pixel::Set(int, int, Color const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text&lang;64&rang;::Write(int, int, Color const&) const
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text&lang;64&rang;::Text__sub_object(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::DrawScene(int)
</UL>

<P><STRONG><a name="[c9]"></a>delay_1ms</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, systick.o(.text.delay_1ms))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::Delay(unsigned int)
</UL>

<P><STRONG><a name="[af]"></a>delay_decrement</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, systick.o(.text.delay_decrement))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[ee]"></a>gpio_af_set</STRONG> (Thumb, 86 bytes, Stack size 28 bytes, gd32e23x_gpio.o(.text.gpio_af_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gpio_af_set
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::Init()
</UL>

<P><STRONG><a name="[123]"></a>gpio_bit_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32e23x_gpio.o(.text.gpio_bit_reset))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinOut::ToLow() const
</UL>

<P><STRONG><a name="[122]"></a>gpio_bit_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32e23x_gpio.o(.text.gpio_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinOut::ToHi() const
</UL>

<P><STRONG><a name="[101]"></a>gpio_input_bit_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e23x_gpio.o(.text.gpio_input_bit_get))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::Button::IsDown()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinIn::IsHi() const
</UL>

<P><STRONG><a name="[c8]"></a>gpio_mode_set</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, gd32e23x_gpio.o(.text.gpio_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::Button::Init()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::Init()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinIn::Init()
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinOut::Init()
</UL>

<P><STRONG><a name="[d9]"></a>gpio_output_options_set</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, gd32e23x_gpio.o(.text.gpio_output_options_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gpio_output_options_set
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::Init()
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinOut::Init()
</UL>

<P><STRONG><a name="[f2]"></a>i2c_ack_config</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32e23x_i2c.o(.text.i2c_ack_config))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::Read(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::Write(unsigned char, unsigned char*, int)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::Init()
</UL>

<P><STRONG><a name="[ef]"></a>i2c_clock_config</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, gd32e23x_i2c.o(.text.i2c_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::Init()
</UL>

<P><STRONG><a name="[fc]"></a>i2c_data_receive</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32e23x_i2c.o(.text.i2c_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::Read(unsigned char, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[f9]"></a>i2c_data_transmit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32e23x_i2c.o(.text.i2c_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::Read(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::Write(unsigned char, unsigned char*, int)
</UL>

<P><STRONG><a name="[f1]"></a>i2c_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e23x_i2c.o(.text.i2c_enable))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::Init()
</UL>

<P><STRONG><a name="[f8]"></a>i2c_flag_clear</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32e23x_i2c.o(.text.i2c_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::Read(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::Write(unsigned char, unsigned char*, int)
</UL>

<P><STRONG><a name="[fa]"></a>i2c_flag_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e23x_i2c.o(.text.i2c_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::Read(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::WaitFlagNo(i2c_flag_enum)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::WaitFlagYes(i2c_flag_enum)
</UL>

<P><STRONG><a name="[f7]"></a>i2c_master_addressing</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gd32e23x_i2c.o(.text.i2c_master_addressing))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_master_addressing
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::Read(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::Write(unsigned char, unsigned char*, int)
</UL>

<P><STRONG><a name="[f0]"></a>i2c_mode_addr_config</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gd32e23x_i2c.o(.text.i2c_mode_addr_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_mode_addr_config
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::Init()
</UL>

<P><STRONG><a name="[f6]"></a>i2c_start_on_bus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32e23x_i2c.o(.text.i2c_start_on_bus))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::Read(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::Write(unsigned char, unsigned char*, int)
</UL>

<P><STRONG><a name="[f4]"></a>i2c_stop_on_bus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32e23x_i2c.o(.text.i2c_stop_on_bus))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::Read(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::Write(unsigned char, unsigned char*, int)
</UL>

<P><STRONG><a name="[75]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = main &rArr; Device::Update() &rArr; Display::Update() &rArr; Display::DrawScene(int) &rArr; Menu::Draw() &rArr; Item::Draw() const &rArr; Time::Draw() const &rArr; Watch::Draw(int, int, Color const&) &rArr; RTCDateTime::Draw(int, int, Color const&) const &rArr; Text&lang;64&rang;::Write(int, int, Color const&) const &rArr; Char::Write(int, int, Color const&) const &rArr; Rect::Fill(int, int, Color const&) const &rArr; HLine::Draw(int, int, Color const&) const &rArr; Pixel::Set(int, int, Color const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Update()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[bb]"></a>nvic_irq_enable</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, gd32e23x_misc.o(.text.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Init()
</UL>

<P><STRONG><a name="[b1]"></a>nvic_vector_table_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e23x_misc.o(.text.nvic_vector_table_set))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[124]"></a>rcu_clock_freq_get</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, gd32e23x_rcu.o(.text.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_clock_config
</UL>

<P><STRONG><a name="[27]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32e23x_rcu.o(.text.rcu_periph_clock_enable))
<BR>[Address Reference Count : 1]<UL><LI> hal.o(.text._ZN3HAL4InitEv)
</UL>
<P><STRONG><a name="[126]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32e23x_rcu.o(.text.rcu_periph_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
</UL>

<P><STRONG><a name="[125]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32e23x_rcu.o(.text.rcu_periph_reset_enable))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
</UL>

<P><STRONG><a name="[ba]"></a>systick_config</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, systick.o(.text.systick_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = systick_config
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Init()
</UL>

<P><STRONG><a name="[bd]"></a>timer_deinit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, gd32e23x_timer.o(.text.timer_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Init()
</UL>

<P><STRONG><a name="[c1]"></a>timer_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e23x_timer.o(.text.timer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Init()
</UL>

<P><STRONG><a name="[bf]"></a>timer_init</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, gd32e23x_timer.o(.text.timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Init()
</UL>

<P><STRONG><a name="[c0]"></a>timer_interrupt_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32e23x_timer.o(.text.timer_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Init()
</UL>

<P><STRONG><a name="[b3]"></a>timer_interrupt_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32e23x_timer.o(.text.timer_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Init()
</UL>

<P><STRONG><a name="[b2]"></a>timer_interrupt_flag_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32e23x_timer.o(.text.timer_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
</UL>

<P><STRONG><a name="[be]"></a>timer_struct_para_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e23x_timer.o(.text.timer_struct_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Init()
</UL>

<P><STRONG><a name="[a9]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, btod.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>

<P><STRONG><a name="[9c]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[94]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[6e]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[26]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[47]"></a>_printf_fp_dec</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _printf_fp_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[4b]"></a>_printf_fp_hex</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _printf_fp_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[f5]"></a>HAL_I2C::WaitFlagYes(i2c_flag_enum)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, hal_i2c.o(.text._ZN7HAL_I2CL11WaitFlagYesE13i2c_flag_enum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_I2C::WaitFlagYes(i2c_flag_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_get
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeMeterMS::ElapsedTime() const
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeMeterMS::Reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::Read(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::Write(unsigned char, unsigned char*, int)
</UL>

<P><STRONG><a name="[2d]"></a>HAL_I2C::WaitFlagNo(i2c_flag_enum)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, hal_i2c.o(.text._ZN7HAL_I2CL10WaitFlagNoE13i2c_flag_enum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_I2C::WaitFlagNo(i2c_flag_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_get
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeMeterMS::ElapsedTime() const
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeMeterMS::Reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::Write(unsigned char, unsigned char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_i2c.o(.text._ZN7HAL_I2C4ReadEhPht)
</UL>
<P><STRONG><a name="[39]"></a>_GLOBAL__sub_I_Menu.cpp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, menu.o(.text._GLOBAL__sub_I_Menu.cpp))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.init_array)
</UL>
<P><STRONG><a name="[3a]"></a>_GLOBAL__sub_I_PageHistory.cpp</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pagehistory.o(.text._GLOBAL__sub_I_PageHistory.cpp))
<BR>[Address Reference Count : 1]<UL><LI> pagehistory.o(.init_array)
</UL>
<P><STRONG><a name="[3b]"></a>_GLOBAL__sub_I_PageMain.cpp</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, pagemain.o(.text._GLOBAL__sub_I_PageMain.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GLOBAL__sub_I_PageMain.cpp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pagemain.o(.init_array)
</UL>
<P><STRONG><a name="[35]"></a>PageCalls::PageDoorBell::OnDraw_DoorBell()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pagecalls.o(.text._ZN9PageCalls12PageDoorBellL15OnDraw_DoorBellEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PageCalls::PageDoorBell::OnDraw_DoorBell() &rArr; PageCalls::DrawParameters(Source::E)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageCalls::DrawParameters(Source::E)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pagecalls.o(.rodata._ZN9PageCalls12PageDoorBellL14dppageDoorBellE)
</UL>
<P><STRONG><a name="[105]"></a>PageCalls::DrawParameters(Source::E)</STRONG> (Thumb, 232 bytes, Stack size 96 bytes, pagecalls.o(.text._ZN9PageCallsL14DrawParametersEN6Source1EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PageCalls::DrawParameters(Source::E)
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageCalls::PageSoundSensor::OnDraw_SoundSensor()
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageCalls::PageIntercom::OnDraw_Intercom()
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageCalls::PageHomePhone::OnDraw_HomePhone()
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageCalls::PageMobile::OnDraw_Mobile()
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageCalls::PageDoorBell::OnDraw_DoorBell()
</UL>

<P><STRONG><a name="[34]"></a>PageCalls::PageMobile::OnDraw_Mobile()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pagecalls.o(.text._ZN9PageCalls10PageMobileL13OnDraw_MobileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PageCalls::PageMobile::OnDraw_Mobile() &rArr; PageCalls::DrawParameters(Source::E)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageCalls::DrawParameters(Source::E)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pagecalls.o(.rodata._ZN9PageCalls10PageMobileL12dppageMobileE)
</UL>
<P><STRONG><a name="[37]"></a>PageCalls::PageHomePhone::OnDraw_HomePhone()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pagecalls.o(.text._ZN9PageCalls13PageHomePhoneL16OnDraw_HomePhoneEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PageCalls::PageHomePhone::OnDraw_HomePhone() &rArr; PageCalls::DrawParameters(Source::E)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageCalls::DrawParameters(Source::E)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pagecalls.o(.rodata._ZN9PageCalls13PageHomePhoneL15dppageHomePhoneE)
</UL>
<P><STRONG><a name="[36]"></a>PageCalls::PageIntercom::OnDraw_Intercom()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pagecalls.o(.text._ZN9PageCalls12PageIntercomL15OnDraw_IntercomEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PageCalls::PageIntercom::OnDraw_Intercom() &rArr; PageCalls::DrawParameters(Source::E)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageCalls::DrawParameters(Source::E)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pagecalls.o(.rodata._ZN9PageCalls12PageIntercomL14dppageIntercomE)
</UL>
<P><STRONG><a name="[38]"></a>PageCalls::PageSoundSensor::OnDraw_SoundSensor()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pagecalls.o(.text._ZN9PageCalls15PageSoundSensorL18OnDraw_SoundSensorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PageCalls::PageSoundSensor::OnDraw_SoundSensor() &rArr; PageCalls::DrawParameters(Source::E)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageCalls::DrawParameters(Source::E)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pagecalls.o(.rodata._ZN9PageCalls15PageSoundSensorL17dppageSoundSensorE)
</UL>
<P><STRONG><a name="[3c]"></a>_GLOBAL__sub_I_PageCalls.cpp</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pagecalls.o(.text._GLOBAL__sub_I_PageCalls.cpp))
<BR>[Address Reference Count : 1]<UL><LI> pagecalls.o(.init_array)
</UL>
<P><STRONG><a name="[103]"></a>CMT2210AW::GetBits(unsigned long long)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, cmt2210aw.o(.text._ZN9CMT2210AWL7GetBitsEy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CMT2210AW::GetBits(unsigned long long)
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2210AW::CallbackOnBit()
</UL>

<P><STRONG><a name="[b5]"></a>WriteBitToControlRegister(unsigned char, unsigned char, bool)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, pcf8563.o(.text._ZL25WriteBitToControlRegisterhhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = WriteBitToControlRegister(unsigned char, unsigned char, bool) &rArr; HAL_I2C::Read(unsigned char, unsigned char*, unsigned short) &rArr; HAL_I2C::WaitFlagYes(i2c_flag_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::Read(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C::Write(unsigned char, unsigned char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563::STOPEnable(bool)
</UL>

<P><STRONG><a name="[2b]"></a>ST7735::Write_Cmd(unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, st7735.o(.text._ZN6ST7735L9Write_CmdEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ST7735::Write_Cmd(unsigned char) &rArr; ST7735::SendByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinOut::ToLow() const
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::SendByte(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.text._ZN6ST77354InitEv)
</UL>
<P><STRONG><a name="[2c]"></a>ST7735::Write_Cmd_Data(unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, st7735.o(.text._ZN6ST7735L14Write_Cmd_DataEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ST7735::Write_Cmd_Data(unsigned char) &rArr; ST7735::SendByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinOut::ToHi() const
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::SendByte(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.text._ZN6ST77354InitEv)
</UL>
<P><STRONG><a name="[e4]"></a>ST7735::SendByte(unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, st7735.o(.text._ZN6ST7735L8SendByteEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ST7735::SendByte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::SendData16(unsigned short)
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::Write_Cmd_Data(unsigned char)
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::Write_Cmd(unsigned char)
</UL>

<P><STRONG><a name="[e1]"></a>ST7735::SendData16(unsigned short)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, st7735.o(.text._ZN6ST7735L10SendData16Et))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ST7735::SendData16(unsigned short) &rArr; ST7735::SendByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinOut::ToHi() const
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::SendByte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::WriteBuffer(int)
</UL>

<P><STRONG><a name="[dc]"></a>Player::StartStream(Player::CompressedStreamState*, unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, player.o(.text._ZN6PlayerL11StartStreamEPNS_21CompressedStreamStateEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Player::StartStream(Player::CompressedStreamState*, unsigned char) &rArr; Player::ReadBits(Player::CompressedStreamState*, unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Player::ReadBits(Player::CompressedStreamState*, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Player::StartMelody(Melody const*, unsigned short)
</UL>

<P><STRONG><a name="[de]"></a>Player::ReadBits(Player::CompressedStreamState*, unsigned char, unsigned short)</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, player.o(.text._ZN6PlayerL8ReadBitsEPNS_21CompressedStreamStateEht))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Player::ReadBits(Player::CompressedStreamState*, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Player::StartStream(Player::CompressedStreamState*, unsigned char)
</UL>

<P><STRONG><a name="[25]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[96]"></a>_fp_digits</STRONG> (Thumb, 412 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_ediv &rArr; btod_internal_div &rArr; __ieee_status
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[a8]"></a>btod_internal_mul</STRONG> (Thumb, 492 bytes, Stack size 56 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[aa]"></a>btod_internal_div</STRONG> (Thumb, 520 bytes, Stack size 64 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = btod_internal_div &rArr; __ieee_status
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[ad]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[a0]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[a2]"></a>_printf_wc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<HR></body></html>
